/*
 * Visualization source
 */
define([
            'jquery',
            'underscore',
            'vizapi/SplunkVisualizationBase',
            'vizapi/SplunkVisualizationUtils',
            // Add required assets to this list
	    'd3-force'
        ],
        function(
            $,
            _,
            SplunkVisualizationBase,
            vizUtils,
            // Add required assets to this list.  Must be in the same order as above
	    d3_force
        ) {
  
    // Extend from SplunkVisualizationBase
    return SplunkVisualizationBase.extend({
  
        initialize: function() {
            SplunkVisualizationBase.prototype.initialize.apply(this, arguments);
            this.$el = $(this.el);

	    this.$el.empty();
	    this.$el.addClass( 'viz-forcemap' );

	    this.width = this.$el.width();
	    this.height = this.$el.height();

	    this.$svg = $("<svg></svg>")
					.addClass("forcemap2-viz")
					.attr("width",this.width)
					.attr("height",this.height);

	    $(this.el).append(this.$svg);

            // Initialization logic goes here
        },

        // Search data params
        getInitialDataParams: function() {
            return ({
                outputMode: SplunkVisualizationBase.RAW_OUTPUT_MODE,
                count: 10000
            });
        },


	onConfigChange: function(config) { 
	    // TODO: update settings when the user options change
        },

        // Optionally implement to format data returned from search. 
        // The returned object will be passed to updateView as 'data'
        formatData: function(data) {

            // TODO: Format data if necessary

            return data;
        },

	setupView: function() { 
		this.$forcemap = d3.forceSimulation()
		                   .force("link", d3.forceLink().id(function(d) { return d.id; }))
				   .force("charge", d3.forceManyBody())
				   .force("center", d3.forceCenter(this.width/2,this.height/2));
	},
  
        // Implement updateView to render a visualization.
        //  'data' will be the data object returned from formatData or from the search
        //  'config' will be the configuration property object
        updateView: function(data, config) {
	    var link = this.$svg.append("g")
	                   .attr("class", "links")
      		           .selectAll("line")
		           // TODO: ??? .data(graph.links)
		           .enter().append("line");
	    var node = this.$svg.append("g")
	                        .attr("class", "nodes")
				.selectAll("circle")
				// TODO: ??? .data(graph.nodes)
				.enter().append("circle")
				               .attr("r", 2.5)
					       .call(d3.drag()
					             .on("start", dragstarted)
						     .on("drag", dragged)
						     .on("end", dragended));

            node.append("title")
	        .text(function(d) { return d.id });

	    simulation
	        .nodes(graph.nodes)
		.on("tick", ticked);
	    simulation.force("link")
	        .links(graph.links);

            function ticked() {
	        link
		    .attr("x1", function(d) { return d.source.x; })
		    .attr("y1", function(d) { return d.source.y; })
		    .attr("x2", function(d) { return d.target.x; })
		    .attr("y2", function(d) { return d.target.y; });

		node
		    .attr("cx", function(d) { return d.x; })
		    .attr("cy", function(d) { return d.y; });
	     }

	     function dragstarted(d) {
	         if (!d3.event.active) simulation.alphaTarget(0.3).restart()
		 simulation.fix(d);
	     }

	     function dragged(d) {
	         simulatioin.fix(d, d3.event.x, d3.event.y);
	     }

	     function dragended(d) {
	         if (!d3.event.active) simulation.alphaTarget(0);
		 simulation.unfix(d);
	     }

        },

        // Override to respond to re-sizing events
        reflow: function() {
	    this.width = this.$el.width();
	    this.height = this.$el.height();
            console.log("Reflow to ",this.width, " x ", this.height);

	    this.$svg.width(this.width)
	             .height(this.height);
	}
    });
});
